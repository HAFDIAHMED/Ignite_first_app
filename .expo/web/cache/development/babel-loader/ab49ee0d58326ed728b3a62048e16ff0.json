{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Button = Button;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _text = require(\"../text/text\");\n\nvar _button = require(\"./button.presets\");\n\nvar _ramda = require(\"ramda\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\ahafdi\\\\Desktop\\\\react native\\\\ignite\\\\PizzaApp\\\\app\\\\components\\\\button\\\\button.tsx\";\nvar _excluded = [\"preset\", \"tx\", \"text\", \"style\", \"textStyle\", \"children\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction Button(props) {\n  var _props$preset = props.preset,\n      preset = _props$preset === void 0 ? \"primary\" : _props$preset,\n      tx = props.tx,\n      text = props.text,\n      styleOverride = props.style,\n      textStyleOverride = props.textStyle,\n      children = props.children,\n      rest = (0, _objectWithoutProperties2.default)(props, _excluded);\n  var viewStyle = (0, _ramda.mergeAll)((0, _ramda.flatten)([_button.viewPresets[preset] || _button.viewPresets.primary, styleOverride]));\n  var textStyle = (0, _ramda.mergeAll)((0, _ramda.flatten)([_button.textPresets[preset] || _button.textPresets.primary, textStyleOverride]));\n  var content = children || React.createElement(_text.Text, {\n    tx: tx,\n    text: text,\n    style: textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 31\n    }\n  });\n  return React.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({\n    style: viewStyle\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }), content);\n}","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/app/components/button/button.tsx"],"names":["Button","props","preset","tx","text","styleOverride","style","textStyleOverride","textStyle","children","rest","viewStyle","viewPresets","primary","textPresets","content"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;AAOO,SAASA,MAAT,CAAgBC,KAAhB,EAAoC;AAEzC,sBAQIA,KARJ,CACEC,MADF;AAAA,MACEA,MADF,8BACW,SADX;AAAA,MAEEC,EAFF,GAQIF,KARJ,CAEEE,EAFF;AAAA,MAGEC,IAHF,GAQIH,KARJ,CAGEG,IAHF;AAAA,MAISC,aAJT,GAQIJ,KARJ,CAIEK,KAJF;AAAA,MAKaC,iBALb,GAQIN,KARJ,CAKEO,SALF;AAAA,MAMEC,QANF,GAQIR,KARJ,CAMEQ,QANF;AAAA,MAOKC,IAPL,0CAQIT,KARJ;AAUA,MAAMU,SAAS,GAAG,qBAAS,oBAAQ,CAACC,oBAAYV,MAAZ,KAAuBU,oBAAYC,OAApC,EAA6CR,aAA7C,CAAR,CAAT,CAAlB;AACA,MAAMG,SAAS,GAAG,qBAChB,oBAAQ,CAACM,oBAAYZ,MAAZ,KAAuBY,oBAAYD,OAApC,EAA6CN,iBAA7C,CAAR,CADgB,CAAlB;AAIA,MAAMQ,OAAO,GAAGN,QAAQ,IAAI,oBAAC,UAAD;AAAM,IAAA,EAAE,EAAEN,EAAV;AAAc,IAAA,IAAI,EAAEC,IAApB;AAA0B,IAAA,KAAK,EAAEI,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B;AAEA,SACE,oBAAC,6BAAD;AAAkB,IAAA,KAAK,EAAEG;AAAzB,KAAwCD,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGK,OADH,CADF;AAKD","sourcesContent":["import * as React from \"react\"\nimport { TouchableOpacity } from \"react-native\"\nimport { Text } from \"../text/text\"\nimport { viewPresets, textPresets } from \"./button.presets\"\nimport { ButtonProps } from \"./button.props\"\nimport { mergeAll, flatten } from \"ramda\"\n\n/**\n * For your text displaying needs.\n *\n * This component is a HOC over the built-in React Native one.\n */\nexport function Button(props: ButtonProps) {\n  // grab the props\n  const {\n    preset = \"primary\",\n    tx,\n    text,\n    style: styleOverride,\n    textStyle: textStyleOverride,\n    children,\n    ...rest\n  } = props\n\n  const viewStyle = mergeAll(flatten([viewPresets[preset] || viewPresets.primary, styleOverride]))\n  const textStyle = mergeAll(\n    flatten([textPresets[preset] || textPresets.primary, textStyleOverride]),\n  )\n\n  const content = children || <Text tx={tx} text={text} style={textStyle} />\n\n  return (\n    <TouchableOpacity style={viewStyle} {...rest}>\n      {content}\n    </TouchableOpacity>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}
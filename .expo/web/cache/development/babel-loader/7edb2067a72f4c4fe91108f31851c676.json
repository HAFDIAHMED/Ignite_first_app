{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reactotron = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactotronReactNative = _interopRequireDefault(require(\"reactotron-react-native\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _mobxStateTree = require(\"mobx-state-tree\");\n\nvar _reactotronConfig = require(\"./reactotron-config\");\n\nvar _reactotronMst = require(\"reactotron-mst\");\n\nvar _storage = require(\"../../utils/storage\");\n\nvar _navigation = require(\"../../navigation\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar noop = function noop() {\n  return undefined;\n};\n\nif (__DEV__) {\n  console.tron = _reactotronReactNative.default;\n} else {\n  console.tron = {\n    benchmark: noop,\n    clear: noop,\n    close: noop,\n    configure: noop,\n    connect: noop,\n    display: noop,\n    error: noop,\n    image: noop,\n    log: noop,\n    logImportant: noop,\n    onCustomCommand: noop,\n    overlay: noop,\n    reportError: noop,\n    send: noop,\n    startTimer: noop,\n    storybookSwitcher: noop,\n    use: noop,\n    useReactNative: noop,\n    warn: noop\n  };\n}\n\nvar Reactotron = function () {\n  function Reactotron() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _reactotronConfig.DEFAULT_REACTOTRON_CONFIG;\n    (0, _classCallCheck2.default)(this, Reactotron);\n    this.config = _objectSpread(_objectSpread({\n      host: \"localhost\",\n      useAsyncStorage: true\n    }, config), {}, {\n      state: _objectSpread({\n        initial: false,\n        snapshots: false\n      }, config && config.state)\n    });\n  }\n\n  (0, _createClass2.default)(Reactotron, [{\n    key: \"setRootStore\",\n    value: function setRootStore(rootStore, initialData) {\n      if (__DEV__) {\n        rootStore = rootStore;\n        this.rootStore = rootStore;\n        var _this$config$state = this.config.state,\n            initial = _this$config$state.initial,\n            snapshots = _this$config$state.snapshots;\n        var name = \"ROOT STORE\";\n\n        if (initial) {\n          console.tron.display({\n            name: name,\n            value: initialData,\n            preview: \"Initial State\"\n          });\n        }\n\n        if (snapshots) {\n          (0, _mobxStateTree.onSnapshot)(rootStore, function (snapshot) {\n            console.tron.display({\n              name: name,\n              value: snapshot,\n              preview: \"New State\"\n            });\n          });\n        }\n\n        console.tron.trackMstNode(rootStore);\n      }\n    }\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var RX;\n      return _regenerator.default.async(function setup$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (__DEV__) {\n                _reactotronReactNative.default.configure({\n                  name: this.config.name || require(\"../../../package.json\").name,\n                  host: this.config.host\n                });\n\n                if (this.config.useAsyncStorage) {\n                  _reactotronReactNative.default.setAsyncStorageHandler(_reactNative.AsyncStorage);\n                }\n\n                _reactotronReactNative.default.useReactNative({\n                  asyncStorage: this.config.useAsyncStorage ? undefined : false\n                });\n\n                RX = /postProcessSnapshot|@APPLY_SNAPSHOT/;\n\n                _reactotronReactNative.default.use((0, _reactotronMst.mst)({\n                  filter: function filter(event) {\n                    return RX.test(event.name) === false;\n                  }\n                }));\n\n                _reactotronReactNative.default.connect();\n\n                _reactotronReactNative.default.onCustomCommand({\n                  title: \"Reset Root Store\",\n                  description: \"Resets the MST store\",\n                  command: \"resetStore\",\n                  handler: function handler() {\n                    console.tron.log(\"resetting store\");\n                    (0, _storage.clear)();\n                  }\n                });\n\n                _reactotronReactNative.default.onCustomCommand({\n                  title: \"Reset Navigation State\",\n                  description: \"Resets the navigation state\",\n                  command: \"resetNavigation\",\n                  handler: function handler() {\n                    console.tron.log(\"resetting navigation state\");\n\n                    _navigation.RootNavigation.resetRoot({\n                      routes: []\n                    });\n                  }\n                });\n\n                _reactotronReactNative.default.onCustomCommand({\n                  title: \"Go Back\",\n                  description: \"Goes back\",\n                  command: \"goBack\",\n                  handler: function handler() {\n                    console.tron.log(\"Going back\");\n\n                    _navigation.RootNavigation.goBack();\n                  }\n                });\n\n                if (this.config.clearOnLoad) {\n                  _reactotronReactNative.default.clear();\n                }\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Reactotron;\n}();\n\nexports.Reactotron = Reactotron;","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/app/services/reactotron/reactotron.ts"],"names":["noop","undefined","__DEV__","console","tron","Tron","benchmark","clear","close","configure","connect","display","error","image","log","logImportant","onCustomCommand","overlay","reportError","send","startTimer","storybookSwitcher","use","useReactNative","warn","Reactotron","config","DEFAULT_REACTOTRON_CONFIG","host","useAsyncStorage","state","initial","snapshots","rootStore","initialData","name","value","preview","snapshot","trackMstNode","require","setAsyncStorageHandler","AsyncStorage","asyncStorage","RX","filter","event","test","title","description","command","handler","RootNavigation","resetRoot","routes","goBack","clearOnLoad"],"mappings":"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","sourcesContent":["import Tron from \"reactotron-react-native\"\nimport { AsyncStorage } from \"react-native\"\nimport { RootStore } from \"../../models/root-store/root-store\"\nimport { onSnapshot } from \"mobx-state-tree\"\nimport { ReactotronConfig, DEFAULT_REACTOTRON_CONFIG } from \"./reactotron-config\"\nimport { mst } from \"reactotron-mst\"\nimport { clear } from \"../../utils/storage\"\nimport { RootNavigation } from \"../../navigation\"\n\n// Teach TypeScript about the bad things we want to do.\ndeclare global {\n  interface Console {\n    /**\n     * Hey, it's Reactotron if we're in dev, and no-ops if we're in prod.\n     */\n    tron: typeof Tron\n  }\n}\n\n/** Do Nothing. */\nconst noop = () => undefined\n\n// in dev, we attach Reactotron, in prod we attach a interface-compatible mock.\nif (__DEV__) {\n  console.tron = Tron // attach reactotron to `console.tron`\n} else {\n  // attach a mock so if things sneaky by our __DEV__ guards, we won't crash.\n  console.tron = {\n    benchmark: noop,\n    clear: noop,\n    close: noop,\n    configure: noop,\n    connect: noop,\n    display: noop,\n    error: noop,\n    image: noop,\n    log: noop,\n    logImportant: noop,\n    onCustomCommand: noop,\n    overlay: noop,\n    reportError: noop,\n    send: noop,\n    startTimer: noop,\n    storybookSwitcher: noop,\n    use: noop,\n    useReactNative: noop,\n    warn: noop,\n  }\n}\n\n/**\n * You'll probably never use the service like this since we hang the Reactotron\n * instance off of `console.tron`. This is only to be consistent with the other\n * services.\n */\nexport class Reactotron {\n  config: ReactotronConfig\n\n  rootStore: any\n\n  /**\n   * Create the Reactotron service.\n   *\n   * @param config the configuration\n   */\n  constructor(config: ReactotronConfig = DEFAULT_REACTOTRON_CONFIG) {\n    // merge the passed in config with some defaults\n    this.config = {\n      host: \"localhost\",\n      useAsyncStorage: true,\n      ...config,\n      state: {\n        initial: false,\n        snapshots: false,\n        ...(config && config.state),\n      },\n    }\n  }\n\n  /**\n   * Hook into the root store for doing awesome state-related things.\n   *\n   * @param rootStore The root store\n   */\n  setRootStore(rootStore: any, initialData: any) {\n    if (__DEV__) {\n      rootStore = rootStore as RootStore // typescript hack\n      this.rootStore = rootStore\n\n      const { initial, snapshots } = this.config.state\n      const name = \"ROOT STORE\"\n\n      // logging features\n      if (initial) {\n        console.tron.display({ name, value: initialData, preview: \"Initial State\" })\n      }\n      // log state changes?\n      if (snapshots) {\n        onSnapshot(rootStore, snapshot => {\n          console.tron.display({ name, value: snapshot, preview: \"New State\" })\n        })\n      }\n\n      // @ts-ignore\n      console.tron.trackMstNode(rootStore)\n    }\n  }\n\n  /**\n   * Configure reactotron based on the the config settings passed in, then connect if we need to.\n   */\n  async setup() {\n    // only run this in dev... metro bundler will ignore this block: 🎉\n    if (__DEV__) {\n      // configure reactotron\n      Tron.configure({\n        name: this.config.name || require(\"../../../package.json\").name,\n        host: this.config.host,\n      })\n\n      // hookup middleware\n      if (this.config.useAsyncStorage) {\n        Tron.setAsyncStorageHandler(AsyncStorage)\n      }\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      Tron.useReactNative({\n        asyncStorage: this.config.useAsyncStorage ? undefined : false,\n      })\n\n      // ignore some chatty `mobx-state-tree` actions\n      const RX = /postProcessSnapshot|@APPLY_SNAPSHOT/\n\n      // hookup mobx-state-tree middleware\n      Tron.use(\n        mst({\n          filter: event => RX.test(event.name) === false,\n        }),\n      )\n\n      // connect to the app\n      Tron.connect()\n\n      // Register Custom Commands\n      Tron.onCustomCommand({\n        title: \"Reset Root Store\",\n        description: \"Resets the MST store\",\n        command: \"resetStore\",\n        handler: () => {\n          console.tron.log(\"resetting store\")\n          clear()\n        },\n      })\n\n      Tron.onCustomCommand({\n        title: \"Reset Navigation State\",\n        description: \"Resets the navigation state\",\n        command: \"resetNavigation\",\n        handler: () => {\n          console.tron.log(\"resetting navigation state\")\n          RootNavigation.resetRoot({ routes: [] })\n        },\n      })\n\n      Tron.onCustomCommand({\n        title: \"Go Back\",\n        description: \"Goes back\",\n        command: \"goBack\",\n        handler: () => {\n          console.tron.log(\"Going back\")\n          RootNavigation.goBack()\n        },\n      })\n\n      // clear if we should\n      if (this.config.clearOnLoad) {\n        Tron.clear()\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
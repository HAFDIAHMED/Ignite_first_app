{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NAVIGATION_PERSISTENCE_KEY = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nrequire(\"./i18n\");\n\nrequire(\"./utils/ignore-warnings\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _fonts = require(\"./theme/fonts\");\n\nvar _navigation = require(\"./navigation\");\n\nvar _models = require(\"./models\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _screens = require(\"./screens\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\ahafdi\\\\Desktop\\\\react native\\\\ignite\\\\PizzaApp\\\\app\\\\app.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n(0, _reactNativeScreens.enableScreens)();\nvar NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\";\nexports.NAVIGATION_PERSISTENCE_KEY = NAVIGATION_PERSISTENCE_KEY;\n\nfunction App() {\n  var navigationRef = (0, _react.useRef)();\n\n  var _useState = (0, _react.useState)(undefined),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      rootStore = _useState2[0],\n      setRootStore = _useState2[1];\n\n  (0, _navigation.setRootNavigation)(navigationRef);\n  (0, _navigation.useBackButtonHandler)(navigationRef, _navigation.canExit);\n  (0, _react.useEffect)(function () {\n    (function _callee() {\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap((0, _fonts.initFonts)());\n\n            case 2:\n              (0, _models.setupRootStore)().then(setRootStore);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  if (!rootStore) return null;\n  return _react.default.createElement(_models.RootStoreProvider, {\n    value: rootStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialSafeAreaInsets: _reactNativeSafeAreaContext.initialWindowSafeAreaInsets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_screens.ProfileScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/app/app.tsx"],"names":["NAVIGATION_PERSISTENCE_KEY","App","navigationRef","undefined","rootStore","setRootStore","canExit","then","initialWindowSafeAreaInsets"],"mappings":";;;;;;;;;;;AAWA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AAOA;;AAKA;;AACA;;;;;;;;AACA;AAEO,IAAMA,0BAA0B,GAAG,kBAAnC;;;AAKP,SAASC,GAAT,GAAe;AACb,MAAMC,aAAa,GAAG,oBAAtB;;AACA,kBAAkC,qBAAgCC,SAAhC,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,qCAAkBH,aAAlB;AACA,wCAAqBA,aAArB,EAAoCI,mBAApC;AAIA,wBAAU,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACO,uBADP;;AAAA;AAEC,4CAAiBC,IAAjB,CAAsBF,YAAtB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALD,EAKG,EALH;AAWA,MAAI,CAACD,SAAL,EAAgB,OAAO,IAAP;AAGhB,SACE,6BAAC,yBAAD;AAAmB,IAAA,KAAK,EAAEA,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,4CAAD;AAAkB,IAAA,qBAAqB,EAAEI,uDAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD;;eAEcP,G","sourcesContent":["/**\n * Welcome to the main entry point of the app. In this file, we'll\n * be kicking off our app or storybook.\n *\n * Most of this file is boilerplate and you shouldn't need to modify\n * it very often. But take some time to look through and understand\n * what is going on here.\n *\n * The app navigation resides in ./app/navigation, so head over there\n * if you're interested in adding screens and navigators.\n */\nimport \"./i18n\"\nimport \"./utils/ignore-warnings\"\nimport React, { useState, useEffect, useRef } from \"react\"\nimport { NavigationContainerRef } from \"@react-navigation/native\"\nimport { SafeAreaProvider, initialWindowSafeAreaInsets } from \"react-native-safe-area-context\"\nimport { initFonts } from \"./theme/fonts\"\nimport * as storage from \"./utils/storage\"\nimport {\n  useBackButtonHandler,\n  RootNavigator,\n  canExit,\n  setRootNavigation,\n  useNavigationPersistence,\n} from \"./navigation\"\nimport { RootStore, RootStoreProvider, setupRootStore } from \"./models\"\n\n// This puts screens in a native ViewController or Activity. If you want fully native\n// stack navigation, use `createNativeStackNavigator` in place of `createStackNavigator`:\n// https://github.com/kmagiera/react-native-screens#using-native-stack-navigator\nimport { enableScreens } from 'react-native-screens'\nimport { ProfileScreen } from \"./screens\"\nenableScreens()\n\nexport const NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\"\n\n/**\n * This is the root component of our app.\n */\nfunction App() {\n  const navigationRef = useRef<NavigationContainerRef>()\n  const [rootStore, setRootStore] = useState<RootStore | undefined>(undefined)\n\n  setRootNavigation(navigationRef)\n  useBackButtonHandler(navigationRef, canExit)\n\n\n  // Kick off initial async loading actions, like loading fonts and RootStore\n  useEffect(() => {\n    (async () => {\n      await initFonts()\n      setupRootStore().then(setRootStore)\n    })()\n  }, [])\n\n  // Before we show the app, we have to wait for our state to be ready.\n  // In the meantime, don't render anything. This will be the background\n  // color set in native by rootView's background color. You can replace\n  // with your own loading component if you wish.\n  if (!rootStore) return null\n\n  // otherwise, we're ready to render the app\n  return (\n    <RootStoreProvider value={rootStore}>\n      <SafeAreaProvider initialSafeAreaInsets={initialWindowSafeAreaInsets}>\n        <ProfileScreen/>\n      </SafeAreaProvider>\n    </RootStoreProvider>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"script"}
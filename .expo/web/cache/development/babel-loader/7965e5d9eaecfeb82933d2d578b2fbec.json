{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ThemeContext = exports.ThemeConsumer = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _deepmerge = _interopRequireDefault(require(\"deepmerge\"));\n\nvar _colors = _interopRequireDefault(require(\"./colors\"));\n\nvar _colorsDark = _interopRequireDefault(require(\"./colorsDark\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\ahafdi\\\\Desktop\\\\react native\\\\ignite\\\\PizzaApp\\\\node_modules\\\\react-native-elements\\\\dist\\\\config\\\\ThemeProvider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ThemeContext = _react.default.createContext({\n  theme: {\n    colors: _colors.default\n  }\n});\n\nexports.ThemeContext = ThemeContext;\n\nvar ThemeProvider = function (_React$Component) {\n  (0, _inherits2.default)(ThemeProvider, _React$Component);\n\n  var _super = _createSuper(ThemeProvider);\n\n  function ThemeProvider(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ThemeProvider);\n    _this = _super.call(this, props);\n\n    _this.updateTheme = function (updates) {\n      _this.setState(function (_ref) {\n        var theme = _ref.theme;\n        return {\n          theme: (0, _deepmerge.default)(theme, updates)\n        };\n      });\n    };\n\n    _this.replaceTheme = function (theme) {\n      _this.setState(function () {\n        return {\n          theme: (0, _deepmerge.default)(_this.defaultTheme, theme)\n        };\n      });\n    };\n\n    _this.getTheme = function () {\n      return _this.state.theme;\n    };\n\n    var defaultColors = props.useDark ? _colorsDark.default : _colors.default;\n    _this.defaultTheme = (0, _deepmerge.default)({\n      colors: defaultColors\n    }, props.theme);\n    _this.state = {\n      theme: _this.defaultTheme,\n      useDark: Boolean(props.useDark)\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(ThemeProvider, [{\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, this.props.children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var useDark = props.useDark;\n\n      var isTheme = function isTheme(theme) {\n        return !(Object.keys(theme).length === 0 && theme.constructor === Object);\n      };\n\n      if (useDark !== state.useDark || isTheme(props.theme) && props.theme !== state.theme) {\n        var defaultColors = useDark ? _colorsDark.default : _colors.default;\n        return {\n          theme: (0, _deepmerge.default)(state.theme, (0, _deepmerge.default)({\n            colors: defaultColors\n          }, props.theme)),\n          useDark: useDark\n        };\n      }\n\n      return null;\n    }\n  }]);\n  return ThemeProvider;\n}(_react.default.Component);\n\nexports.default = ThemeProvider;\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false\n};\nvar ThemeConsumer = ThemeContext.Consumer;\nexports.ThemeConsumer = ThemeConsumer;","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/node_modules/react-native-elements/dist/config/ThemeProvider.js"],"names":["ThemeContext","React","createContext","theme","colors","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","darkColors","Boolean","children","isTheme","Object","keys","length","constructor","Component","defaultProps","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AACO,IAAMA,YAAY,GAAGC,eAAMC,aAAN,CAAoB;AAC5CC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAANA;AADG;AADqC,CAApB,CAArB;;;;IAKcC,a;;;;;AACjB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACf,8BAAMA,KAAN;;AACA,UAAKC,WAAL,GAAmB,UAACC,OAAD,EAAa;AAC5B,YAAKC,QAAL,CAAc;AAAA,YAAGN,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC1BA,UAAAA,KAAK,EAAE,wBAAUA,KAAV,EAAiBK,OAAjB;AADmB,SAAhB;AAAA,OAAd;AAGH,KAJD;;AAKA,UAAKE,YAAL,GAAoB,UAACP,KAAD,EAAW;AAC3B,YAAKM,QAAL,CAAc;AAAA,eAAO;AACjBN,UAAAA,KAAK,EAAE,wBAAU,MAAKQ,YAAf,EAA6BR,KAA7B;AADU,SAAP;AAAA,OAAd;AAGH,KAJD;;AAKA,UAAKS,QAAL,GAAgB;AAAA,aAAM,MAAKC,KAAL,CAAWV,KAAjB;AAAA,KAAhB;;AACA,QAAMW,aAAa,GAAGR,KAAK,CAACS,OAAN,GAAgBC,mBAAhB,GAA6BZ,eAAnD;AACA,UAAKO,YAAL,GAAoB,wBAAU;AAC1BP,MAAAA,MAAM,EAAEU;AADkB,KAAV,EAEjBR,KAAK,CAACH,KAFW,CAApB;AAGA,UAAKU,KAAL,GAAa;AACTV,MAAAA,KAAK,EAAE,MAAKQ,YADH;AAETI,MAAAA,OAAO,EAAEE,OAAO,CAACX,KAAK,CAACS,OAAP;AAFP,KAAb;AAjBe;AAqBlB;;;;WAoBD,kBAAS;AACL,aAAQ,6BAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAE;AAClCZ,UAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KADgB;AAElCI,UAAAA,WAAW,EAAE,KAAKA,WAFgB;AAGlCG,UAAAA,YAAY,EAAE,KAAKA;AAHe,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKP,KAAKJ,KAAL,CAAWY,QALJ,CAAR;AAOH;;;WA3BD,kCAAgCZ,KAAhC,EAAuCO,KAAvC,EAA8C;AAC1C,UAAQE,OAAR,GAAoBT,KAApB,CAAQS,OAAR;;AACA,UAAMI,OAAO,GAAG,SAAVA,OAAU,CAAChB,KAAD,EAAW;AACvB,eAAO,EAAEiB,MAAM,CAACC,IAAP,CAAYlB,KAAZ,EAAmBmB,MAAnB,KAA8B,CAA9B,IAAmCnB,KAAK,CAACoB,WAAN,KAAsBH,MAA3D,CAAP;AACH,OAFD;;AAKA,UAAIL,OAAO,KAAKF,KAAK,CAACE,OAAlB,IACCI,OAAO,CAACb,KAAK,CAACH,KAAP,CAAP,IAAwBG,KAAK,CAACH,KAAN,KAAgBU,KAAK,CAACV,KADnD,EAC2D;AACvD,YAAMW,aAAa,GAAGC,OAAO,GAAGC,mBAAH,GAAgBZ,eAA7C;AACA,eAAO;AACHD,UAAAA,KAAK,EAAE,wBAAUU,KAAK,CAACV,KAAhB,EAAuB,wBAAU;AACpCC,YAAAA,MAAM,EAAEU;AAD4B,WAAV,EAE3BR,KAAK,CAACH,KAFqB,CAAvB,CADJ;AAIHY,UAAAA,OAAO,EAAPA;AAJG,SAAP;AAMH;;AACD,aAAO,IAAP;AACH;;;EAzCsCd,eAAMuB,S;;;AAoDjDnB,aAAa,CAACoB,YAAd,GAA6B;AACzBtB,EAAAA,KAAK,EAAE,EADkB;AAEzBY,EAAAA,OAAO,EAAE;AAFgB,CAA7B;AAIO,IAAMW,aAAa,GAAG1B,YAAY,CAAC2B,QAAnC","sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport colors from './colors';\nimport darkColors from './colorsDark';\nexport const ThemeContext = React.createContext({\n    theme: {\n        colors,\n    },\n});\nexport default class ThemeProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateTheme = (updates) => {\n            this.setState(({ theme }) => ({\n                theme: deepmerge(theme, updates),\n            }));\n        };\n        this.replaceTheme = (theme) => {\n            this.setState(() => ({\n                theme: deepmerge(this.defaultTheme, theme),\n            }));\n        };\n        this.getTheme = () => this.state.theme;\n        const defaultColors = props.useDark ? darkColors : colors;\n        this.defaultTheme = deepmerge({\n            colors: defaultColors,\n        }, props.theme);\n        this.state = {\n            theme: this.defaultTheme,\n            useDark: Boolean(props.useDark),\n        };\n    }\n    static getDerivedStateFromProps(props, state) {\n        const { useDark } = props;\n        const isTheme = (theme) => {\n            return !(Object.keys(theme).length === 0 && theme.constructor === Object);\n        };\n        //isTheme will check if the theme is provided by user and will update the theme only if its provided by user\n        //Not checking if the theme exist or not will always result in if statement getting executed as props.theme !== state.theme if theme is not provided\n        if (useDark !== state.useDark ||\n            (isTheme(props.theme) && props.theme !== state.theme)) {\n            const defaultColors = useDark ? darkColors : colors;\n            return {\n                theme: deepmerge(state.theme, deepmerge({\n                    colors: defaultColors,\n                }, props.theme)),\n                useDark,\n            };\n        }\n        return null;\n    }\n    render() {\n        return (<ThemeContext.Provider value={{\n            theme: this.state.theme,\n            updateTheme: this.updateTheme,\n            replaceTheme: this.replaceTheme,\n        }}>\n        {this.props.children}\n      </ThemeContext.Provider>);\n    }\n}\nThemeProvider.defaultProps = {\n    theme: {},\n    useDark: false,\n};\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"script"}
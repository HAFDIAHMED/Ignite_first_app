{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormRow = FormRow;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _formRow = require(\"./form-row.presets\");\n\nvar _ramda = require(\"ramda\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\ahafdi\\\\Desktop\\\\react native\\\\ignite\\\\PizzaApp\\\\app\\\\components\\\\form-row\\\\form-row.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction FormRow(props) {\n  var viewStyle = (0, _ramda.mergeAll)((0, _ramda.flatten)([_formRow.PRESETS[props.preset], props.style]));\n  return React.createElement(_reactNative.View, {\n    style: viewStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/app/components/form-row/form-row.tsx"],"names":["FormRow","props","viewStyle","PRESETS","preset","style","children"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAKO,SAASA,OAAT,CAAiBC,KAAjB,EAAsC;AAC3C,MAAMC,SAAS,GAAG,qBAAS,oBAAQ,CAACC,iBAAQF,KAAK,CAACG,MAAd,CAAD,EAAwBH,KAAK,CAACI,KAA9B,CAAR,CAAT,CAAlB;AAEA,SAAO,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEH,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBD,KAAK,CAACK,QAA/B,CAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { View } from \"react-native\"\nimport { PRESETS } from \"./form-row.presets\"\nimport { FormRowProps } from \"./form-row.props\"\nimport { mergeAll, flatten } from \"ramda\"\n\n/**\n * A horizontal container component used to hold a row of a form.\n */\nexport function FormRow(props: FormRowProps) {\n  const viewStyle = mergeAll(flatten([PRESETS[props.preset], props.style]))\n\n  return <View style={viewStyle}>{props.children}</View>\n}\n"]},"metadata":{},"sourceType":"script"}
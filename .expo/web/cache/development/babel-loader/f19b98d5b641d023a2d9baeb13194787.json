{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withStatus = void 0;\n\nvar _mobx = require(\"mobx\");\n\nvar withStatus = function withStatus() {\n  var status = _mobx.observable.box(\"idle\");\n\n  return {\n    views: {\n      get status() {\n        return status.get();\n      },\n\n      set status(value) {\n        status.set(value);\n      }\n\n    },\n    actions: {\n      setStatus: function setStatus(value) {\n        status.set(value);\n      }\n    }\n  };\n};\n\nexports.withStatus = withStatus;","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/app/models/extensions/with-status.ts"],"names":["withStatus","status","observable","box","views","get","value","set","actions","setStatus"],"mappings":";;;;;AAAA;;AAyBO,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAM;AAI9B,MAAMC,MAAgC,GAAGC,iBAAWC,GAAX,CAAe,MAAf,CAAzC;;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAE;AAEL,UAAIH,MAAJ,GAAa;AACX,eAAOA,MAAM,CAACI,GAAP,EAAP;AACD,OAJI;;AAML,UAAIJ,MAAJ,CAAWK,KAAX,EAA8B;AAC5BL,QAAAA,MAAM,CAACM,GAAP,CAAWD,KAAX;AACD;;AARI,KADF;AAWLE,IAAAA,OAAO,EAAE;AAMPC,MAAAA,SANO,qBAMGH,KANH,EAMsB;AAC3BL,QAAAA,MAAM,CAACM,GAAP,CAAWD,KAAX;AACD;AARM;AAXJ,GAAP;AAsBD,CA5BM","sourcesContent":["import { observable, IObservableValue } from \"mobx\"\n\nexport type StatusType = \"idle\" | \"pending\" | \"done\" | \"error\"\n\n/**\n * Adds a status field to the model often for tracking api access.\n *\n * This property is a string which can be observed, but will not\n * participate in any serialization.\n *\n * Use this to extend your models:\n *\n * ```ts\n *   types.model(\"MyModel\")\n *     .props({})\n *     .actions(self => ({}))\n *     .extend(withStatus) // <--- time to shine baby!!!\n * ```\n *\n * This will give you these 3 options:\n *\n *   .status            // returns a string\n *   .status = \"done\"   // change the status directly\n *   .setStatus(\"done\") // change the status and trigger an mst action\n */\nexport const withStatus = () => {\n  /**\n   * The observable backing store for the status field.\n   */\n  const status: IObservableValue<string> = observable.box(\"idle\")\n\n  return {\n    views: {\n      // a getter\n      get status() {\n        return status.get() as StatusType\n      },\n      // as setter\n      set status(value: StatusType) {\n        status.set(value)\n      },\n    },\n    actions: {\n      /**\n       * Set the status to something new.\n       *\n       * @param value The new status.\n       */\n      setStatus(value: StatusType) {\n        status.set(value)\n      },\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextField = TextField;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theme = require(\"../../theme\");\n\nvar _i18n = require(\"../../i18n\");\n\nvar _text = require(\"../text/text\");\n\nvar _ramda = require(\"ramda\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\ahafdi\\\\Desktop\\\\react native\\\\ignite\\\\PizzaApp\\\\app\\\\components\\\\text-field\\\\text-field.tsx\";\nvar _excluded = [\"placeholderTx\", \"placeholder\", \"labelTx\", \"label\", \"preset\", \"style\", \"inputStyle\", \"forwardedRef\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar CONTAINER = {\n  paddingVertical: _theme.spacing[3]\n};\nvar INPUT = {\n  fontFamily: _theme.typography.primary,\n  color: _theme.color.text,\n  minHeight: 44,\n  fontSize: 18,\n  backgroundColor: _theme.color.palette.white\n};\nvar PRESETS = {\n  default: {}\n};\n\nvar enhance = function enhance(style, styleOverride) {\n  return (0, _ramda.mergeAll)((0, _ramda.flatten)([style, styleOverride]));\n};\n\nfunction TextField(props) {\n  var placeholderTx = props.placeholderTx,\n      placeholder = props.placeholder,\n      labelTx = props.labelTx,\n      label = props.label,\n      _props$preset = props.preset,\n      preset = _props$preset === void 0 ? \"default\" : _props$preset,\n      styleOverride = props.style,\n      inputStyleOverride = props.inputStyle,\n      forwardedRef = props.forwardedRef,\n      rest = (0, _objectWithoutProperties2.default)(props, _excluded);\n\n  var containerStyle = _objectSpread(_objectSpread({}, CONTAINER), PRESETS[preset]);\n\n  containerStyle = enhance(containerStyle, styleOverride);\n  var inputStyle = INPUT;\n  inputStyle = enhance(inputStyle, inputStyleOverride);\n  var actualPlaceholder = placeholderTx ? (0, _i18n.translate)(placeholderTx) : placeholder;\n  return _react.default.createElement(_reactNative.View, {\n    style: containerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_text.Text, {\n    preset: \"fieldLabel\",\n    tx: labelTx,\n    text: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n    placeholder: actualPlaceholder,\n    placeholderTextColor: _theme.color.palette.lighterGrey,\n    underlineColorAndroid: _theme.color.transparent\n  }, rest, {\n    style: inputStyle,\n    ref: forwardedRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/app/components/text-field/text-field.tsx"],"names":["CONTAINER","paddingVertical","spacing","INPUT","fontFamily","typography","primary","color","text","minHeight","fontSize","backgroundColor","palette","white","PRESETS","default","enhance","style","styleOverride","TextField","props","placeholderTx","placeholder","labelTx","label","preset","inputStyleOverride","inputStyle","forwardedRef","rest","containerStyle","actualPlaceholder","lighterGrey","transparent"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;AAGA,IAAMA,SAAoB,GAAG;AAC3BC,EAAAA,eAAe,EAAEC,eAAQ,CAAR;AADU,CAA7B;AAKA,IAAMC,KAAgB,GAAG;AACvBC,EAAAA,UAAU,EAAEC,kBAAWC,OADA;AAEvBC,EAAAA,KAAK,EAAEA,aAAMC,IAFU;AAGvBC,EAAAA,SAAS,EAAE,EAHY;AAIvBC,EAAAA,QAAQ,EAAE,EAJa;AAKvBC,EAAAA,eAAe,EAAEJ,aAAMK,OAAN,CAAcC;AALR,CAAzB;AASA,IAAMC,OAAsC,GAAG;AAC7CC,EAAAA,OAAO,EAAE;AADoC,CAA/C;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,aAAR,EAA0B;AACxC,SAAO,qBAAS,oBAAQ,CAACD,KAAD,EAAQC,aAAR,CAAR,CAAT,CAAP;AACD,CAFD;;AAOO,SAASC,SAAT,CAAmBC,KAAnB,EAA0C;AAC/C,MACEC,aADF,GAUID,KAVJ,CACEC,aADF;AAAA,MAEEC,WAFF,GAUIF,KAVJ,CAEEE,WAFF;AAAA,MAGEC,OAHF,GAUIH,KAVJ,CAGEG,OAHF;AAAA,MAIEC,KAJF,GAUIJ,KAVJ,CAIEI,KAJF;AAAA,sBAUIJ,KAVJ,CAKEK,MALF;AAAA,MAKEA,MALF,8BAKW,SALX;AAAA,MAMSP,aANT,GAUIE,KAVJ,CAMEH,KANF;AAAA,MAOcS,kBAPd,GAUIN,KAVJ,CAOEO,UAPF;AAAA,MAQEC,YARF,GAUIR,KAVJ,CAQEQ,YARF;AAAA,MASKC,IATL,0CAUIT,KAVJ;;AAWA,MAAIU,cAAyB,mCAAQ9B,SAAR,GAAsBc,OAAO,CAACW,MAAD,CAA7B,CAA7B;;AACAK,EAAAA,cAAc,GAAGd,OAAO,CAACc,cAAD,EAAiBZ,aAAjB,CAAxB;AAEA,MAAIS,UAAqB,GAAGxB,KAA5B;AACAwB,EAAAA,UAAU,GAAGX,OAAO,CAACW,UAAD,EAAaD,kBAAb,CAApB;AACA,MAAMK,iBAAiB,GAAGV,aAAa,GAAG,qBAAUA,aAAV,CAAH,GAA8BC,WAArE;AAEA,SACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEQ,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,UAAD;AAAM,IAAA,MAAM,EAAC,YAAb;AAA0B,IAAA,EAAE,EAAEP,OAA9B;AAAuC,IAAA,IAAI,EAAEC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,6BAAC,sBAAD;AACE,IAAA,WAAW,EAAEO,iBADf;AAEE,IAAA,oBAAoB,EAAExB,aAAMK,OAAN,CAAcoB,WAFtC;AAGE,IAAA,qBAAqB,EAAEzB,aAAM0B;AAH/B,KAIMJ,IAJN;AAKE,IAAA,KAAK,EAAEF,UALT;AAME,IAAA,GAAG,EAAEC,YANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAaD","sourcesContent":["import React from \"react\"\nimport { View, TextInput, TextStyle, ViewStyle } from \"react-native\"\nimport { color, spacing, typography } from \"../../theme\"\nimport { translate } from \"../../i18n\"\nimport { Text } from \"../text/text\"\nimport { TextFieldProps } from \"./text-field.props\"\nimport { mergeAll, flatten } from \"ramda\"\n\n// the base styling for the container\nconst CONTAINER: ViewStyle = {\n  paddingVertical: spacing[3],\n}\n\n// the base styling for the TextInput\nconst INPUT: TextStyle = {\n  fontFamily: typography.primary,\n  color: color.text,\n  minHeight: 44,\n  fontSize: 18,\n  backgroundColor: color.palette.white,\n}\n\n// currently we have no presets, but that changes quickly when you build your app.\nconst PRESETS: { [name: string]: ViewStyle } = {\n  default: {},\n}\n\nconst enhance = (style, styleOverride) => {\n  return mergeAll(flatten([style, styleOverride]))\n}\n\n/**\n * A component which has a label and an input together.\n */\nexport function TextField(props: TextFieldProps) {\n  const {\n    placeholderTx,\n    placeholder,\n    labelTx,\n    label,\n    preset = \"default\",\n    style: styleOverride,\n    inputStyle: inputStyleOverride,\n    forwardedRef,\n    ...rest\n  } = props\n  let containerStyle: ViewStyle = { ...CONTAINER, ...PRESETS[preset] }\n  containerStyle = enhance(containerStyle, styleOverride)\n\n  let inputStyle: TextStyle = INPUT\n  inputStyle = enhance(inputStyle, inputStyleOverride)\n  const actualPlaceholder = placeholderTx ? translate(placeholderTx) : placeholder\n\n  return (\n    <View style={containerStyle}>\n      <Text preset=\"fieldLabel\" tx={labelTx} text={label} />\n      <TextInput\n        placeholder={actualPlaceholder}\n        placeholderTextColor={color.palette.lighterGrey}\n        underlineColorAndroid={color.transparent}\n        {...rest}\n        style={inputStyle}\n        ref={forwardedRef}\n      />\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}
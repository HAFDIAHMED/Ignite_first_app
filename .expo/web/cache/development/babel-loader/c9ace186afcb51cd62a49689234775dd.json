{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Tooltip = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _config = require(\"../config\");\n\nvar _helpers = require(\"../helpers\");\n\nvar _Triangle = _interopRequireDefault(require(\"./Triangle\"));\n\nvar _getTooltipCoordinate2 = _interopRequireWildcard(require(\"./getTooltipCoordinate\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\ahafdi\\\\Desktop\\\\react native\\\\ignite\\\\PizzaApp\\\\node_modules\\\\react-native-elements\\\\dist\\\\tooltip\\\\Tooltip.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  toggleAction: 'onPress',\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: function onClose() {},\n  onOpen: function onOpen() {},\n  skipAndroidStatusBar: false,\n  ModalComponent: _reactNative.Modal,\n  closeOnlyOnBackdropPress: false\n};\n\nvar Tooltip = function (_React$Component) {\n  (0, _inherits2.default)(Tooltip, _React$Component);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Tooltip);\n    _this = _super.apply(this, arguments);\n    _this._isMounted = false;\n    _this.state = {\n      isVisible: false,\n      yOffset: 0,\n      xOffset: 0,\n      elementWidth: 0,\n      elementHeight: 0\n    };\n\n    _this.toggleTooltip = function () {\n      var onClose = _this.props.onClose;\n\n      _this.getElementPosition();\n\n      _this._isMounted && _this.setState(function (prevState) {\n        if (prevState.isVisible) {\n          onClose && onClose();\n        }\n\n        return {\n          isVisible: !prevState.isVisible\n        };\n      });\n    };\n\n    _this.wrapWithPress = function (toggleOnPress, toggleAction, children) {\n      if (toggleOnPress) {\n        return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, (0, _defineProperty2.default)({}, toggleAction, _this.toggleTooltip), {\n          delayLongPress: 250,\n          activeOpacity: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }\n        }), children);\n      }\n\n      return children;\n    };\n\n    _this.containerStyle = function (withOverlay, overlayColor) {\n      return {\n        backgroundColor: withOverlay ? overlayColor : 'transparent',\n        flex: 1\n      };\n    };\n\n    _this.getTooltipStyle = function () {\n      var _ref2;\n\n      var _this$state = _this.state,\n          yOffset = _this$state.yOffset,\n          xOffset = _this$state.xOffset,\n          elementHeight = _this$state.elementHeight,\n          elementWidth = _this$state.elementWidth;\n      var _this$props = _this.props,\n          height = _this$props.height,\n          backgroundColor = _this$props.backgroundColor,\n          width = _this$props.width,\n          withPointer = _this$props.withPointer,\n          containerStyle = _this$props.containerStyle;\n\n      var _getTooltipCoordinate = (0, _getTooltipCoordinate2.default)(xOffset, yOffset, elementWidth, elementHeight, _helpers.ScreenWidth, _helpers.ScreenHeight, width, height, withPointer),\n          x = _getTooltipCoordinate.x,\n          y = _getTooltipCoordinate.y;\n\n      return _reactNative.StyleSheet.flatten([(_ref2 = {\n        position: 'absolute'\n      }, (0, _defineProperty2.default)(_ref2, _reactNative.I18nManager.isRTL ? 'right' : 'left', x), (0, _defineProperty2.default)(_ref2, \"top\", y), (0, _defineProperty2.default)(_ref2, \"width\", width), (0, _defineProperty2.default)(_ref2, \"height\", height), (0, _defineProperty2.default)(_ref2, \"backgroundColor\", backgroundColor), (0, _defineProperty2.default)(_ref2, \"display\", 'flex'), (0, _defineProperty2.default)(_ref2, \"alignItems\", 'center'), (0, _defineProperty2.default)(_ref2, \"justifyContent\", 'center'), (0, _defineProperty2.default)(_ref2, \"flex\", 1), (0, _defineProperty2.default)(_ref2, \"borderRadius\", 10), (0, _defineProperty2.default)(_ref2, \"padding\", 10), _ref2), containerStyle]);\n    };\n\n    _this.renderPointer = function (tooltipY) {\n      var _this$state2 = _this.state,\n          yOffset = _this$state2.yOffset,\n          xOffset = _this$state2.xOffset,\n          elementHeight = _this$state2.elementHeight,\n          elementWidth = _this$state2.elementWidth;\n      var _this$props2 = _this.props,\n          backgroundColor = _this$props2.backgroundColor,\n          pointerColor = _this$props2.pointerColor;\n      var pastMiddleLine = yOffset > (tooltipY || 0);\n      return _react.default.createElement(_reactNative.View, {\n        style: (0, _defineProperty2.default)({\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2\n        }, _reactNative.I18nManager.isRTL ? 'right' : 'left', xOffset + (0, _getTooltipCoordinate2.getElementVisibleWidth)(elementWidth, xOffset, _helpers.ScreenWidth) / 2 - 7.5),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_Triangle.default, {\n        style: {\n          borderBottomColor: pointerColor || backgroundColor\n        },\n        isDown: pastMiddleLine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.getTooltipHighlightedButtonStyle = function () {\n      var _ref4;\n\n      var highlightColor = _this.props.highlightColor;\n      var _this$state3 = _this.state,\n          yOffset = _this$state3.yOffset,\n          xOffset = _this$state3.xOffset,\n          elementWidth = _this$state3.elementWidth,\n          elementHeight = _this$state3.elementHeight;\n      return _ref4 = {\n        position: 'absolute',\n        top: yOffset\n      }, (0, _defineProperty2.default)(_ref4, _reactNative.I18nManager.isRTL ? 'right' : 'left', xOffset), (0, _defineProperty2.default)(_ref4, \"backgroundColor\", highlightColor), (0, _defineProperty2.default)(_ref4, \"overflow\", 'visible'), (0, _defineProperty2.default)(_ref4, \"width\", elementWidth), (0, _defineProperty2.default)(_ref4, \"height\", elementHeight), _ref4;\n    };\n\n    _this.renderTouchableHighlightedButton = function () {\n      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();\n\n      return _react.default.createElement(_reactNative.TouchableOpacity, {\n        testID: \"tooltipTouchableHighlightedButton\",\n        onPress: function onPress() {\n          return _this.toggleTooltip();\n        },\n        style: TooltipHighlightedButtonStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      }, _this.props.children);\n    };\n\n    _this.renderStaticHighlightedButton = function () {\n      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();\n\n      return _react.default.createElement(_reactNative.View, {\n        style: TooltipHighlightedButtonStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }, _this.props.children);\n    };\n\n    _this.renderHighlightedButton = function () {\n      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;\n\n      if (closeOnlyOnBackdropPress) {\n        return _this.renderTouchableHighlightedButton();\n      } else {\n        return _this.renderStaticHighlightedButton();\n      }\n    };\n\n    _this.renderContent = function (withTooltip) {\n      var _this$props3 = _this.props,\n          popover = _this$props3.popover,\n          withPointer = _this$props3.withPointer,\n          toggleOnPress = _this$props3.toggleOnPress,\n          toggleAction = _this$props3.toggleAction;\n\n      if (!withTooltip) {\n        return _this.wrapWithPress(toggleOnPress, toggleAction, _this.props.children);\n      }\n\n      var tooltipStyle = _this.getTooltipStyle();\n\n      return _react.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      }, _this.renderHighlightedButton(), withPointer && _this.renderPointer(tooltipStyle.top), _react.default.createElement(_reactNative.View, {\n        style: tooltipStyle,\n        testID: \"tooltipPopoverContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, popover));\n    };\n\n    _this.getElementPosition = function () {\n      var skipAndroidStatusBar = _this.props.skipAndroidStatusBar;\n      _this.renderedElement && _this.renderedElement.measure(function (_frameOffsetX, _frameOffsetY, width, height, pageOffsetX, pageOffsetY) {\n        _this._isMounted && _this.setState({\n          xOffset: pageOffsetX,\n          yOffset: _helpers.isIOS || skipAndroidStatusBar ? pageOffsetY : pageOffsetY - _reactNative.Platform.select({\n            android: _reactNative.StatusBar.currentHeight,\n            ios: 20,\n            default: 0\n          }),\n          elementWidth: width,\n          elementHeight: height\n        });\n      });\n    };\n\n    _this.renderStaticModalContent = function () {\n      var _this$props4 = _this.props,\n          withOverlay = _this$props4.withOverlay,\n          overlayColor = _this$props4.overlayColor;\n      return _react.default.createElement(_react.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_reactNative.TouchableOpacity, {\n        style: _this.containerStyle(withOverlay, overlayColor),\n        onPress: _this.toggleTooltip,\n        activeOpacity: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }, _this.renderContent(true)));\n    };\n\n    _this.renderTogglingModalContent = function () {\n      var _this$props5 = _this.props,\n          withOverlay = _this$props5.withOverlay,\n          overlayColor = _this$props5.overlayColor;\n      return _react.default.createElement(_reactNative.TouchableOpacity, {\n        style: _this.containerStyle(withOverlay, overlayColor),\n        onPress: _this.toggleTooltip,\n        activeOpacity: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, _this.renderContent(true));\n    };\n\n    _this.renderModalContent = function () {\n      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;\n\n      if (closeOnlyOnBackdropPress) {\n        return _this.renderStaticModalContent();\n      } else {\n        return _this.renderTogglingModalContent();\n      }\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n      requestAnimationFrame(this.getElementPosition);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isVisible = this.state.isVisible;\n      var _this$props6 = this.props,\n          onOpen = _this$props6.onOpen,\n          ModalComponent = _this$props6.ModalComponent;\n      return _react.default.createElement(_reactNative.View, {\n        collapsable: false,\n        ref: function ref(e) {\n          _this2.renderedElement = e;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }\n      }, this.renderContent(false), _react.default.createElement(ModalComponent, {\n        animationType: \"fade\",\n        visible: isVisible,\n        transparent: true,\n        onShow: onOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }, this.renderModalContent()));\n    }\n  }]);\n  return Tooltip;\n}(_react.default.Component);\n\nexports.Tooltip = Tooltip;\nTooltip.defaultProps = defaultProps;\n\nvar _default = (0, _config.withTheme)(Tooltip, 'Tooltip');\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ahafdi/Desktop/react native/ignite/PizzaApp/node_modules/react-native-elements/dist/tooltip/Tooltip.js"],"names":["defaultProps","withOverlay","overlayColor","highlightColor","withPointer","toggleOnPress","toggleAction","height","width","containerStyle","backgroundColor","onClose","onOpen","skipAndroidStatusBar","ModalComponent","Modal","closeOnlyOnBackdropPress","Tooltip","arguments","_isMounted","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","props","getElementPosition","setState","prevState","wrapWithPress","children","flex","getTooltipStyle","ScreenWidth","ScreenHeight","x","y","StyleSheet","flatten","position","I18nManager","isRTL","renderPointer","tooltipY","pointerColor","pastMiddleLine","top","borderBottomColor","getTooltipHighlightedButtonStyle","renderTouchableHighlightedButton","TooltipHighlightedButtonStyle","renderStaticHighlightedButton","renderHighlightedButton","renderContent","withTooltip","popover","tooltipStyle","renderedElement","measure","_frameOffsetX","_frameOffsetY","pageOffsetX","pageOffsetY","isIOS","Platform","select","android","StatusBar","currentHeight","ios","default","renderStaticModalContent","renderTogglingModalContent","renderModalContent","requestAnimationFrame","e","React","Component"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { TouchableOpacity, Modal, View, StatusBar, I18nManager, StyleSheet, Platform, } from 'react-native';\nimport { withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, { getElementVisibleWidth, } from './getTooltipCoordinate';\nconst defaultProps = {\n    withOverlay: true,\n    overlayColor: 'rgba(250, 250, 250, 0.70)',\n    highlightColor: 'transparent',\n    withPointer: true,\n    toggleOnPress: true,\n    toggleAction: 'onPress',\n    height: 40,\n    width: 150,\n    containerStyle: {},\n    backgroundColor: '#617080',\n    onClose: () => { },\n    onOpen: () => { },\n    skipAndroidStatusBar: false,\n    ModalComponent: Modal,\n    closeOnlyOnBackdropPress: false,\n};\nclass Tooltip extends React.Component {\n    constructor() {\n        super(...arguments);\n        this._isMounted = false;\n        this.state = {\n            isVisible: false,\n            yOffset: 0,\n            xOffset: 0,\n            elementWidth: 0,\n            elementHeight: 0,\n        };\n        this.toggleTooltip = () => {\n            const { onClose } = this.props;\n            this.getElementPosition();\n            this._isMounted &&\n                this.setState((prevState) => {\n                    if (prevState.isVisible) {\n                        onClose && onClose();\n                    }\n                    return { isVisible: !prevState.isVisible };\n                });\n        };\n        this.wrapWithPress = (toggleOnPress, toggleAction, children) => {\n            if (toggleOnPress) {\n                return (<TouchableOpacity {...{ [toggleAction]: this.toggleTooltip }} delayLongPress={250} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>);\n            }\n            return children;\n        };\n        this.containerStyle = (withOverlay, overlayColor) => {\n            return {\n                backgroundColor: withOverlay ? overlayColor : 'transparent',\n                flex: 1,\n            };\n        };\n        this.getTooltipStyle = () => {\n            const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n            const { height, backgroundColor, width, withPointer, containerStyle, } = this.props;\n            const { x, y } = getTooltipCoordinate(xOffset, yOffset, elementWidth, elementHeight, ScreenWidth, ScreenHeight, width, height, withPointer);\n            return StyleSheet.flatten([\n                {\n                    position: 'absolute',\n                    [I18nManager.isRTL ? 'right' : 'left']: x,\n                    top: y,\n                    width,\n                    height,\n                    backgroundColor,\n                    // default styles\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    flex: 1,\n                    borderRadius: 10,\n                    padding: 10,\n                },\n                containerStyle,\n            ]);\n        };\n        this.renderPointer = (tooltipY) => {\n            const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n            const { backgroundColor, pointerColor } = this.props;\n            const pastMiddleLine = yOffset > (tooltipY || 0);\n            return (<View style={{\n                position: 'absolute',\n                top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n                [I18nManager.isRTL ? 'right' : 'left']: xOffset +\n                    getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n                    7.5,\n            }}>\n        <Triangle style={{ borderBottomColor: pointerColor || backgroundColor }} isDown={pastMiddleLine}/>\n      </View>);\n        };\n        this.getTooltipHighlightedButtonStyle = () => {\n            const { highlightColor } = this.props;\n            const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n            return {\n                position: 'absolute',\n                top: yOffset,\n                [I18nManager.isRTL ? 'right' : 'left']: xOffset,\n                backgroundColor: highlightColor,\n                overflow: 'visible',\n                width: elementWidth,\n                height: elementHeight,\n            };\n        };\n        this.renderTouchableHighlightedButton = () => {\n            const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\n            return (<TouchableOpacity testID=\"tooltipTouchableHighlightedButton\" onPress={() => this.toggleTooltip()} style={TooltipHighlightedButtonStyle}>\n        {this.props.children}\n      </TouchableOpacity>);\n        };\n        this.renderStaticHighlightedButton = () => {\n            const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\n            return (<View style={TooltipHighlightedButtonStyle}>{this.props.children}</View>);\n        };\n        this.renderHighlightedButton = () => {\n            const { closeOnlyOnBackdropPress } = this.props;\n            if (closeOnlyOnBackdropPress) {\n                return this.renderTouchableHighlightedButton();\n            }\n            else {\n                return this.renderStaticHighlightedButton();\n            }\n        };\n        this.renderContent = (withTooltip) => {\n            const { popover, withPointer, toggleOnPress, toggleAction } = this.props;\n            if (!withTooltip) {\n                return this.wrapWithPress(toggleOnPress, toggleAction, this.props.children);\n            }\n            const tooltipStyle = this.getTooltipStyle();\n            return (<View>\n        {this.renderHighlightedButton()}\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>);\n        };\n        this.getElementPosition = () => {\n            const { skipAndroidStatusBar } = this.props;\n            this.renderedElement &&\n                this.renderedElement.measure((_frameOffsetX, _frameOffsetY, width, height, pageOffsetX, pageOffsetY) => {\n                    this._isMounted &&\n                        this.setState({\n                            xOffset: pageOffsetX,\n                            yOffset: isIOS || skipAndroidStatusBar\n                                ? pageOffsetY\n                                : pageOffsetY -\n                                    Platform.select({\n                                        android: StatusBar.currentHeight,\n                                        ios: 20,\n                                        default: 0,\n                                    }),\n                            elementWidth: width,\n                            elementHeight: height,\n                        });\n                });\n        };\n        this.renderStaticModalContent = () => {\n            const { withOverlay, overlayColor } = this.props;\n            return (<Fragment>\n        <TouchableOpacity style={this.containerStyle(withOverlay, overlayColor)} onPress={this.toggleTooltip} activeOpacity={1}/>\n        <View>{this.renderContent(true)}</View>\n      </Fragment>);\n        };\n        this.renderTogglingModalContent = () => {\n            const { withOverlay, overlayColor } = this.props;\n            return (<TouchableOpacity style={this.containerStyle(withOverlay, overlayColor)} onPress={this.toggleTooltip} activeOpacity={1}>\n        {this.renderContent(true)}\n      </TouchableOpacity>);\n        };\n        this.renderModalContent = () => {\n            const { closeOnlyOnBackdropPress } = this.props;\n            if (closeOnlyOnBackdropPress) {\n                return this.renderStaticModalContent();\n            }\n            else {\n                return this.renderTogglingModalContent();\n            }\n        };\n    }\n    componentDidMount() {\n        this._isMounted = true;\n        // wait to compute onLayout values.\n        requestAnimationFrame(this.getElementPosition);\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    render() {\n        const { isVisible } = this.state;\n        const { onOpen, ModalComponent } = this.props;\n        return (<View collapsable={false} ref={(e) => {\n            this.renderedElement = e;\n        }}>\n        {this.renderContent(false)}\n        <ModalComponent animationType=\"fade\" visible={isVisible} transparent onShow={onOpen}>\n          {this.renderModalContent()}\n        </ModalComponent>\n      </View>);\n    }\n}\nTooltip.defaultProps = defaultProps;\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.digitGroupingSeparator = exports.decimalSeparator = exports.currency = void 0;\nexports.getLocalizationAsync = getLocalizationAsync;\nexports.timezone = exports.region = exports.locales = exports.locale = exports.isoCurrencyCodes = exports.isRTL = exports.isMetric = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _ExpoLocalization = _interopRequireDefault(require(\"./ExpoLocalization\"));\n\nvar currency = _ExpoLocalization.default.currency;\nexports.currency = currency;\nvar decimalSeparator = _ExpoLocalization.default.decimalSeparator;\nexports.decimalSeparator = decimalSeparator;\nvar digitGroupingSeparator = _ExpoLocalization.default.digitGroupingSeparator;\nexports.digitGroupingSeparator = digitGroupingSeparator;\nvar isoCurrencyCodes = _ExpoLocalization.default.isoCurrencyCodes;\nexports.isoCurrencyCodes = isoCurrencyCodes;\nvar isMetric = _ExpoLocalization.default.isMetric;\nexports.isMetric = isMetric;\nvar isRTL = _ExpoLocalization.default.isRTL;\nexports.isRTL = isRTL;\nvar locale = _ExpoLocalization.default.locale;\nexports.locale = locale;\nvar locales = _ExpoLocalization.default.locales;\nexports.locales = locales;\nvar timezone = _ExpoLocalization.default.timezone;\nexports.timezone = timezone;\nvar region = _ExpoLocalization.default.region;\nexports.region = region;\n\nfunction getLocalizationAsync() {\n  return _regenerator.default.async(function getLocalizationAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regenerator.default.awrap(_ExpoLocalization.default.getLocalizationAsync());\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Localization.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AAWO,IAAM,QAAQ,GAAG,0BAAiB,QAAlC;;AAQA,IAAM,gBAAgB,GAAG,0BAAiB,gBAA1C;;AAQA,IAAM,sBAAsB,GAAG,0BAAiB,sBAAhD;;AAMA,IAAM,gBAAgB,GAAG,0BAAiB,gBAA1C;;AAOA,IAAM,QAAQ,GAAG,0BAAiB,QAAlC;;AASA,IAAM,KAAK,GAAG,0BAAiB,KAA/B;;AASA,IAAM,MAAM,GAAG,0BAAiB,MAAhC;;AAOA,IAAM,OAAO,GAAG,0BAAiB,OAAjC;;AAWA,IAAM,QAAQ,GAAG,0BAAiB,QAAlC;;AASA,IAAM,MAAM,GAAG,0BAAiB,MAAhC;;;AAgBA,SAAe,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACQ,0BAAiB,oBAAjB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import ExpoLocalization from './ExpoLocalization';\nimport { Localization } from './Localization.types';\n\nexport { Localization };\n\n// @needsAudit\n/**\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n */\nexport const currency = ExpoLocalization.currency;\n\n// @needsAudit\n/**\n * Decimal separator used for formatting numbers.\n *\n * @example `','`, `'.'`\n */\nexport const decimalSeparator = ExpoLocalization.decimalSeparator;\n\n// @needsAudit\n/**\n * Digit grouping separator used when formatting numbers larger than 1000.\n *\n * @example `'.'`, `''`, `','`\n */\nexport const digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator;\n\n// @needsAudit\n/**\n * A list of all the supported language ISO codes.\n */\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n\n// @needsAudit\n/**\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\nexport const isMetric = ExpoLocalization.isMetric;\n\n// @needsAudit\n/**\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\nexport const isRTL = ExpoLocalization.isRTL;\n\n// @needsAudit\n/**\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n */\nexport const locale = ExpoLocalization.locale;\n\n// @needsAudit\n/**\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n */\nexport const locales = ExpoLocalization.locales;\n\n// @needsAudit\n/**\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n * better estimation you could use the moment-timezone package but it will add significant bloat to\n * your website's bundle size.\n *\n * @example `'America/Los_Angeles'`\n */\nexport const timezone = ExpoLocalization.timezone;\n\n// @needsAudit\n/**\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `'US'`, `'NZ'`, `null`\n */\nexport const region = ExpoLocalization.region;\n\n// @needsAudit\n/**\n * Get the latest native values from the device. Locale can be changed on some Android devices\n * without resetting the app.\n * > On iOS, changing the locale will cause the device to reset meaning the constants will always be\n * correct.\n *\n * # Example\n * ```ts\n * // When the app returns from the background on Android...\n *\n * const { locale } = await Localization.getLocalizationAsync();\n * ```\n */\nexport async function getLocalizationAsync(): Promise<Localization> {\n  return await ExpoLocalization.getLocalizationAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}